var E=["shafin","arif","faisal","rahim","alak","arjun","rohan","vikram","sachin","anil","rahul","suresh","amit","vijay","john","peter","michael","david","paul","mark","james","robert","thomas","jun","minho","taeyang","hyun","jong","seok","young","woo","jae","hwan","li","hiroshi","kenji","sanjay","daniel","george"],I=["ahmed","khan","hossain","rahman","sharma","verma","gupta","iyer","patel","nair","reddy","singh","mishra","sen","smith","johnson","brown","williams","jones","miller","davis","wilson","kim","lee","park","choi","jung","cho","kang","yun","jang","lim","tanaka","sato","chang","chen","wang","fernandez","garcia"],U=["uswa","hena","tahmina","zimi","laila","aisha","priya","sita","radha","lakshmi","divya","manisha","rekha","anjali","mary","susan","linda","sarah","jennifer","elizabeth","anna","grace","alice","jiyeon","eunji","soyoung","yuna","minji","hyeri","seoyeon","jiyoung","chae","mei","yuki","hana","rosie","sofia","isabella"],T=["ahmed","aktar","sultana","begum","khatun","sharma","verma","gupta","iyer","patel","nair","rani","bose","kapoor","smith","johnson","brown","williams","jones","miller","taylor","anderson","kim","lee","park","choi","jung","cho","kang","lim","jang","seo","tanaka","sato","chen","li","gonzalez","fernandez","rodriguez","morales"],_=["big","small","quick","lazy","bright","happy","sad","angry","brave","calm","clever","kind","cold","hot","loud","quiet","soft","hard","rough","smooth","fast","slow","young","old","strong","weak","tall","short","rich","poor","long","short","heavy","light","dark","pale","deep","shallow","clean","dirty","wet","dry","sweet","sour","bitter","salty","tasty","bland","fresh","stale","new","old","good","bad","nice","mean","polite","rude","friendly","unfriendly","honest","dishonest","careful","careless","lucky","unlucky","beautiful","ugly","handsome","pretty","plain","fancy","simple","complex","easy","difficult","funny","serious","creative","boring","expensive","cheap","important","unimportant","useful","useless","happy","sad","healthy","sick","strong","weak","brave","cowardly","fierce","gentle","famous","unknown","popular","unpopular","safe","dangerous","busy","lazy","organized","messy","confident","nervous","optimistic","pessimistic","curious","indifferent","jealous","proud","shy","outgoing","brilliant","dull","colorful","bland","helpful","useless","bright","dim","cheerful","gloomy","graceful","clumsy","flexible","stiff","humble","arrogant","patient","impatient","reliable","unreliable","faithful","unfaithful","generous","selfish","thoughtful","thoughtless","adventurous","cautious","brave","cowardly","energetic","tired","enthusiastic","apathetic","open-minded","narrow-minded","wise","foolish","intelligent","stupid","sensitive","insensitive","talented","clumsy","loyal","disloyal","trustworthy","untrustworthy","ambitious","lazy","charismatic","dull","spontaneous","predictable","creative","unimaginative","humorous","serious","tolerant","intolerant","considerate","inconsiderate"],H=["red","blue","green","yellow","orange","purple","pink","brown","black","white","gray","beige","cyan","magenta","indigo","violet","teal","maroon","lavender","olive","peach","navy","gold","silver","bronze","aqua","fuchsia","lime","coral","plum","ivory","mint","rose","jade","amber","tan","charcoal","khaki","mustard","periwinkle","turquoise","salmon","sapphire","ruby","emerald","topaz","cerulean","chartreuse","taupe","crimson","scarlet","orchid","pearl","blush","denim","mulberry","cobalt","mocha","sand","apricot","cherry","pearl"],V=["donkey","dog","cat","lion","tiger","elephant","giraffe","zebra","bear","wolf","fox","deer","mouse","rat","horse","sheep","goat","cow","pig","rabbit","squirrel","moose","elk","antelope","buffalo","leopard","cheetah","panther","jaguar","cougar","hyena","rhino","hippo","kangaroo","koala","platypus","ostrich","penguin","dolphin","whale","shark","octopus","squid","crab","lobster","eel","seal","otter","beaver","bat","owl","eagle","hawk","falcon","sparrow","crow","raven","pigeon","parrot","peacock","swan","goose","duck","turkey","chicken","rooster","hen","frog","toad","snake","lizard","iguana","tortoise","turtle","crocodile","alligator","cobra","python","vulture","flamingo","lemur","meerkat","chimpanzee","gorilla","orangutan","baboon","bison","chameleon","armadillo","porcupine","hedgehog","badger","mongoose","walrus","jellyfish","starfish","clam","oyster","shrimp","prawn","moth","butterfly","beetle","ant","bee","wasp","hornet","grasshopper","cricket","locust","mantis","dragonfly","ladybug","termite","slug","snail","worm"],Y=["0","1","2","3","4","5","6","7","8","9"],Z="abcdefghijklmnopqrstuvwxyz".split(""),F={MaleFirstNames:E,MaleSurnames:I,FemaleFirstNames:U,FemaleSurnames:T,Adjectives:_,Colors:H,Animals:V,Digits:Y,Alphabets:Z};var N=n=>{let{keys:s={},dictionaries:o=[],seed:p}=n,e=p?x(p):Math.random,{fullName:b="",email:i="",withUnderscore:t=!0,length:d=12}=s,l=b.split(" ")[0].toLowerCase().replace(/\s+/g,"_"),g=i.split("@")[0].toLowerCase().replace(/[aeiou]/gi,"").split("").sort(()=>e()-.5).join("").slice(0,4),c=new Date,k=`${c.getFullYear()}${String(c.getMonth()+1).padStart(2,"0")}${String(c.getDate()).padStart(2,"0")}`.split("").sort(()=>e()-.5).join("").slice(0,4),j=`${g}${k}`;if(o.length>0){let h=o.filter(f=>f&&f.length>0);if(h.length>0){let f=Math.floor(e()*h.length),v=h[f];v.length>0?j=`${v.slice(0,2).join("_")}_${j}`:console.warn("Random dictionary is empty:",v)}else console.warn("No valid dictionaries provided:",o)}if(t){let h=j.split(""),f=2,v=0;for(let C=0;C<h.length;C++)e()>.5&&v<f&&(h.splice(C,0,"_"),v++);j=h.join("")}let a=`${l}${j}`.toLowerCase().replace(/[^a-z0-9_]/g,"");if(a.length>d)a=a.slice(0,d);else if(a.length<d)for(;a.length<d;)a+=e().toString(36).substr(2,d-a.length);return a};var q=n=>{let{Adjectives:s,Colors:o,Animals:p,Digits:e,Alphabets:b,MaleFirstNames:i,FemaleFirstNames:t}=F,{keys:d={},dictionaries:l=[],seed:S}=n,{wordLength:u=3,separator:g=" ",caseStyle:c="",stringSaltLength:w=0,numberSaltLength:k=0,alphaNumericSaltLength:j=0}=d,a=S?x(S):Math.random,h=(l==null?void 0:l.length)>0?l:[s,o,p,e,b,i,t],f=r=>r[Math.floor(a()*(r==null?void 0:r.length))],v=(r,m)=>{let y="abcdefghijklmnopqrstuvwxyz".split("");return Array.from({length:r},()=>y[Math.floor(m()*y.length)]).join("")},C=(r,m)=>{let y="0123456789".split("");return Array.from({length:r},()=>y[Math.floor(m()*y.length)]).join("")},R=(r,m)=>{let y="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".split("");return Array.from({length:r},()=>y[Math.floor(m()*y.length)]).join("")},D=r=>{switch(c){case"capital":return r.split(g).map(m=>m.charAt(0).toUpperCase()+m.slice(1).toLowerCase()).join(g);case"uppercase":return r.toUpperCase();case"lowercase":return r.toLowerCase();default:return r}},P=()=>{try{let r=Array.from({length:u},()=>{let $=f(h);return f($)}).join(g),m=[];w>0&&m.push(v(w,a)),k>0&&m.push(C(k,a)),j>0&&m.push(R(j,a));let y=m.map($=>D($));if(y.length>0){let $=r.split(g),A=Math.floor(a()*($.length+1));y.forEach(W=>{$.splice(A,0,W),A=Math.floor(a()*($.length+1))}),r=$.join(g)}return typeof r=="string"?D(r):""}catch{return""}},z="";for(;!z;)z=P();return z};var L=n=>{let{keys:s={},dictionaries:o=[],seed:p}=n,{content:e="",author:b="guest",contentLength:i=64,separator:t="-"}=s,l=`${e.length>i?e.slice(0,i):e}${t}by${t}${b}`.toLowerCase().replace(/[^a-z0-9-_]/g,t).replace(new RegExp(`${t}+`,"g"),t).replace(new RegExp(`^${t}+|${t}+$`,"g"),""),S=p?x(p):Math.random;if(o.length>0){let k=[],j=Math.min(Math.floor(S()*9)+1,o.length);for(let a=0;a<j;a++){let h=o[a];if(h&&h.length>0){let f=Math.floor(S()*h.length);k.push(h[f])}}l=`${k.join(t)}${t}${l}`}let u=new Date,g=`${String(u.getDate()).padStart(2,"0")}-${String(u.getMonth()+1).padStart(2,"0")}-${u.getFullYear()}-${String(u.getHours()).padStart(2,"0")}-${String(u.getMinutes()).padStart(2,"0")}-${String(u.getSeconds()).padStart(2,"0")}`,c="bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ0123456789",w="";for(let k=0;k<16;k++)w+=c[Math.floor(S()*c.length)];return`${l}${t}${g}${t}${w}`};var M={username:N,name:q,slug:L};function le(n,s){let o={};typeof n=="number"?o={length:n}:typeof s=="number"?o={...n,length:s}:n&&(o={...n,...s||{}});let{fn:p}=o,e=p&&M[p];if(e)return e(o);let b=t=>{let d="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",l="",S=new Date().toISOString().replace(/[^0-9]/g,""),u=`${Math.random()}${S}${t}`;for(let g=0;g<t;g++){let c=0;for(let w=0;w<u.length;w++)c=(c<<5)-c+u.charCodeAt(w),c|=0;l+=d[Math.abs(c)%d.length],u=l}return l},i=o.length||12;return b(i)}function ce(n,s){typeof n=="string"&&typeof s=="function"?M[n]=s:console.error("Invalid name or generator function provided to nuniqor")}function x(n){let s=typeof n=="number"?n.toString():n.replace(/[^a-zA-Z0-9]/g,"");function o(b){let i=2166136261;for(let t=0;t<b.length;t++)i^=b.charCodeAt(t),i+=(i<<1)+(i<<4)+(i<<7)+(i<<8)+(i<<24);return i>>>0}let e=o(s);return()=>(e^=e<<13,e^=e>>17,e^=e<<5,(e>>>0)/4294967295)}export{F as NuniqDictionary,x as RandomSeed,le as nuniq,ce as nuniqor};
